import{_ as a,o as t,c as e,b as p}from"./app-b41d89f0.js";const r={},b=p('<h1 id="data-type-정의" tabindex="-1"><a class="header-anchor" href="#data-type-정의" aria-hidden="true">#</a> Data Type 정의</h1><p>POWERMDD에서 Data Type의 정의는 Java Language에서 사용하고 있는 Data Type과는 다른 형식의 명칭을 사용하고 있습니다. 명칭의 기준은 Data에 대한 정의의 중심이 되는 Database 시스템에서 사용하고 있는 용도 형식을 참고하여 생성하고 있습니다. <br></p><p>또한 Data의 처리를 위한 용도적인 부분도 일부 고려하여 Data Type을 사용하고 있습니다.<br></p><p>Data Type으로는 String형, 수치형, LOB형, SQL처리시 상수 지원 형, 날짜형으로 정의 되어 있습니다. Data Column에 대한 Data Type의 정의는 POWERMDD Menu에서 Data Column Dictionary에서 정의하고 관리합니다.<br></p><p><b style="font-size:20px;">1) String 형</b><br> String Type으로 사용하고자 할 때 사용합니다. 값을 직접 할당하고자 할 때에는 “값”의 형식으로 처리합니다. <br><b style="font-size:20px;">➀ VARCHAR </b><br> Java언어의 String Data Type과 동일하게 처리됩니다.</p><p style="color:rgb(0, 164, 255);"> Ex) “VAL1”라는 컬럼의 Data Type이 String인 경우 <br> VAL1 == “WORD” </p><p><b style="font-size:20px;">2) 수치 형</b><br> 해당 Column Type은 수치형 Data Type으로 처리됩니다. <br><b style="font-size:20px;">➀ NUMBER </b><br> 수치의 범위는 Java 언어의 double data type의 범위와 동일하게 처리됩니다.</p><p style="color:rgb(0, 164, 255);"> Ex) “VAL1”라는 컬럼의 데이터 타입이 수치형인 경우 <br> VAL1 == 2 || VAL1 == 2.0 </p><p><b style="font-size:20px;">➁ INTEGER </b><br> 수치의 범위는 Java 언어의 integer data Type의 범위와 동일하게 처리됩니다.</p><p style="color:rgb(0, 164, 255);"> Ex) “VAL1”라는 컬럼의 데이터 타입이 수치형인 경우 <br> VAL1 == 2 </p><p><b style="font-size:20px;">➂ LONG </b><br> 수치의 범위는 Java 언어의 long data type의 범위와 동일하게 처리됩니다.</p><p style="color:rgb(0, 164, 255);"> Ex) “VAL1”라는 컬럼의 데이터 타입이 수치형인 경우 <br> VAL1 == 2 || VAL1 == 2.0 </p><p><b style="font-size:20px;">3) LOB 형</b><br><b style="font-size:20px;">➀ BLOB </b><br> 해당 Column Type은 Binary Data 처리를 합니다. 이미지 파일 등을 Database에 저장할 때 주로 사용됩니다. <br> 해당 Data Type으로 선언된 Column은 Parameter 변수형식으로 사용 할 수 없습니다. Binary 형식으로 입출력용으로만 사용됩니다. Java에서는 byte[] Data Type으로 됩니다.</p><p><b style="font-size:20px;">➁ INTEGER </b><br> 해당 Column Type은 String Type으로 4000byte을 초과하는 String Data 일 때 사용합니다. <br> CLOB시에는 Database 입출력 시 Stream 형식으로 처리됩니다.</p><p><b style="font-size:20px;">4) 날짜</b><br><b style="font-size:20px;">➀ ‘#’ 날짜 Data 동적 인식 </b><br> 해당 Column의 값이 날짜 값의 속성을 가지고 있을 때 사용합니다. 날짜 인식 구분 자를 사용하게 되면 연산 처리 시 날짜 연산을 수행합니다. 날짜연산처리 결과는 수치 형 Data type에 저장됩니다. <br></p><p style="color:rgb(0, 164, 255);"> Ex) 해당 “UPD_DT” 날짜 값에 1개월을 더한 일자를 구하고 싶을 때 <br> #UPD_DT + M#1 </p>',16),n=[b];function o(s,y){return t(),e("div",null,n)}const i=a(r,[["render",o],["__file","dataType.html.vue"]]);export{i as default};
