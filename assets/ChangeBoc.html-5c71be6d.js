import{_ as c}from"./ChangeBOC-0ad7df31.js";import{_ as i,r as n,o as d,c as r,a as s,d as e,e as o,b as _,f as t}from"./app-2b436156.js";const h={},l=_('<h1 id="chanage-boc" tabindex="-1"><a class="header-anchor" href="#chanage-boc" aria-hidden="true">#</a> Chanage BOC</h1><p>데이터셋 Object의 레코드에 변화를 주는 구성요소입니다. <br><img class="boxBorder" src="'+c+'" style="width:400px;"> <br></p><h2 id="_1-glv" tabindex="-1"><a class="header-anchor" href="#_1-glv" aria-hidden="true">#</a> 1. GLV</h2><p>단일 값을 해당 서비스 내에서 변수로 사용하는 컴포넌트입니다.</p>',4),p={class:"custom-container tip"},m={class:"custom-container-title"},u=e("p",null,"GLV BOC 이외의 BOC는 In-Out에 기초하여 데이터셋을 구성하나 GLV BOC는 단순히 서비스 내부에서 변수형식으로 선언하여 사용합니다.",-1),C=e("h2",{id:"_2-cvt",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-cvt","aria-hidden":"true"},"#"),t(" 2. CVT")],-1),b=e("p",null,"추가 및 변환 처리된 데이터를 데이터셋 Object로 생성하는 컴포넌트입니다.",-1),B={class:"custom-container tip"},v={class:"custom-container-title"},x=e("p",null,[t("CVT BOC는 입력 데이터셋 Object에 대한 데이터를 가공하여 출력되도록 사용합니다."),e("br"),t(" 이외에 추가적으로 입력 데이터셋 레코드에 대한 필터기능이 있습니다.")],-1),O=e("h2",{id:"_3-get",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_3-get","aria-hidden":"true"},"#"),t(" 3. GET")],-1),R=e("p",null,"화면에서 입력되는 데이터셋에서 필터링 처리를 수행하여 새로운 결과집합을 생성하는 컴포넌트입니다.",-1),f={class:"custom-container tip"},g={class:"custom-container-title"},k=e("p",null,"Select문의 Where 조건문과 동일한 역할을 수행합니다.",-1),D=e("h2",{id:"_4-mrg",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_4-mrg","aria-hidden":"true"},"#"),t(" 4. MRG")],-1),y=e("p",null,"n개의 데이터셋 Object의 레코드를 추출하여 병합된 단일 데이터셋을 생성하는 컴포넌트입니다.",-1),V={class:"custom-container tip"},S={class:"custom-container-title"},M=e("p",null,"일반적으로 최종 결과 데이터셋을 생성하기 위하여 자주 사용됩니다.",-1),j=e("h2",{id:"_5-add",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_5-add","aria-hidden":"true"},"#"),t(" 5. ADD")],-1),A=e("p",null,"지정된 조건에 따라 레코드 Add해두는 컴포넌트입니다.",-1),G={class:"custom-container tip"},L={class:"custom-container-title"},N=e("p",null,[t("Loop 내에서 발생하는 데이터 레코드를 보존해주는 기능입니다."),e("br"),t(" 반드시 MPD BOC, MIUD BOC의 Child 프로세스에서만 사용 가능합니다."),e("br"),t(" MPD BOC, MIUD BOC 내 즉 Loop내에서 사용되는 BOC는 메인 Flow에서 Access할 수 없으나 예외적으로 ADD BOC를 이용하면 메인 Flow의 BOC에서 Access가 가능합니다.")],-1),T=e("h2",{id:"_6-sum",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_6-sum","aria-hidden":"true"},"#"),t(" 6. SUM")],-1),w=e("p",null,"입력 데이터셋 Object에 대하여 구하는 컴포넌트입니다.",-1),I=e("h2",{id:"_7-srd",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_7-srd","aria-hidden":"true"},"#"),t(" 7. SRD")],-1),U=e("p",null,"데이터셋에서 레코드를 여러 개의 멀티 레코드로 분할하는 컴포넌트입니다.",-1),E={class:"custom-container tip"},F={class:"custom-container-title"},P=e("p",null,[t("대상 컬럼의 값을 분할 조건 컬럼으로 기준 값으로 분할합니다."),e("br"),t(" 나눈 나머지 발생 시 나머지 유효 여부를 지정합니다.")],-1),W=e("h2",{id:"_8-srcd",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_8-srcd","aria-hidden":"true"},"#"),t(" 8. SRCD")],-1),q=e("p",null,"단일 레코드를 여러 개의 멀티 레코드로 분리하는 컴포넌트입니다.",-1),z={class:"custom-container tip"},H={class:"custom-container-title"},J=e("p",null,[t("분할기준은 여러 개의 컬럼을 기본 컬럼과 레코드에 개별로 분리할 컬럼들을 설정합니다."),e("br"),t(" SRD BOC와 다른 점은 SRD BOC는 값을 분할하는 방식이지만 SRCD BOC는 가로로 나열되어 있는 컬럼을 기준으로 여러 레코드로 분할 처리합니다.")],-1);function K(Q,X){const a=n("Badge");return d(),r("div",null,[l,s(" Remark "),e("div",p,[e("p",m,[o(a,{type:"tip",text:"Remark",vertical:"middle"})]),u]),s(" "),C,b,s(" Remark "),e("div",B,[e("p",v,[o(a,{type:"tip",text:"Remark",vertical:"middle"})]),x]),s(" "),O,R,s(" Remark "),e("div",f,[e("p",g,[o(a,{type:"tip",text:"Remark",vertical:"middle"})]),k]),s(" "),D,y,s(" Remark "),e("div",V,[e("p",S,[o(a,{type:"tip",text:"Remark",vertical:"middle"})]),M]),s(" "),j,A,s(" Remark "),e("div",G,[e("p",L,[o(a,{type:"tip",text:"Remark",vertical:"middle"})]),N]),s(" "),T,w,I,U,s(" Remark "),e("div",E,[e("p",F,[o(a,{type:"tip",text:"Remark",vertical:"middle"})]),P]),s(" "),W,q,s(" Remark "),e("div",z,[e("p",H,[o(a,{type:"tip",text:"Remark",vertical:"middle"})]),J]),s(" ")])}const $=i(h,[["render",K],["__file","ChangeBoc.html.vue"]]);export{$ as default};
