import{_ as i,r as p,o as l,c as s,f as e,a as r,d as t,e as g,b as n}from"./app-aedf0456.js";const d={},a=n('<h1 id="내장-함수" tabindex="-1"><a class="header-anchor" href="#내장-함수" aria-hidden="true">#</a> 내장 함수</h1><p>POWERMDD에서 연산 처리 시 사용할 수 있는 Function에 대한 설명입니다.</p><p><b style="font-size:20px;">1) Internal Function</b><br><b style="font-size:20px;">(1) GLV BOC을 이용한 Variable 값을 가져오는 Function입니다.</b></p><p><b style="font-size:20px;">➀ (getgvstring) GLV Value 가져오기 </b><br></p><p style="background-color:rgb(223, 230, 247);margin-right:10px;padding-left:20px;">getgvstring(COLUMN)</p>',5),c=t("br",null,null,-1),u=t("p",null,[e("return type : String"),t("br"),e(" parameter : String")],-1),b=t("p",null,[t("b",{style:{"font-size":"20px"}},"➁ (getgvnumber) GLV Value 가져오기 "),t("br")],-1),_=t("p",{style:{"background-color":"rgb(223, 230, 247)","margin-right":"10px","padding-left":"20px"}},"getgvnumber(COLUMN)",-1),h=t("p",null,[e("return type : double "),t("br"),e(" parameter : String")],-1),m=t("p",null,[t("b",{style:{"font-size":"20px"}},"➂ (getgvint) GLV Value 가져오기 "),t("br")],-1),x=t("p",{style:{"background-color":"rgb(223, 230, 247)","margin-right":"10px","padding-left":"20px"}},"getgvint(COLUMN)",-1),y=t("p",null,[e("return type : int "),t("br"),e(" parameter : String")],-1),f=t("p",null,[t("b",{style:{"font-size":"20px"}},"➃ (getgvlong) GLV Value 가져오기 "),t("br")],-1),C=t("p",{style:{"background-color":"rgb(223, 230, 247)","margin-right":"10px","padding-left":"20px"}},"getgvlong(COLUMN)",-1),S=t("p",null,[e("return type : long "),t("br"),e(" parameter : String")],-1),k=t("p",null,[t("b",{style:{"font-size":"20px"}},"(2) 결과 코드 및 결과 Message를 값으로 가져오는 Function입니다. "),t("br"),e(" 서비스 업무 처리 시에 처리한 BOC의 Route를 확인하여 처리 하고 싶을 때 사용합니다. 특정 결과 처리를 위하여 복잡한 이전 처리의 상황을 확인하고 싶을 때 각 BOC별로 처리 Message에 상태 값을 설정하고 이후 최종 결과 처리부에서 상태 값을 비교 확인하여 처리합니다.")],-1),V=t("p",null,[t("b",{style:{"font-size":"20px"}},"➀ (getretmsg) EVENT 결과메시지 "),t("br")],-1),z=t("p",{style:{"background-color":"rgb(223, 230, 247)","margin-right":"10px","padding-left":"20px"}},"getretmsg()",-1),v=t("p",null,[e("return type : String "),t("br"),e(" parameter : void")],-1),R=t("p",null,[t("b",{style:{"font-size":"20px"}},"➁ (getretcode) GLV Value 가져오기 "),t("br")],-1),L=t("p",{style:{"background-color":"rgb(223, 230, 247)","margin-right":"10px","padding-left":"20px"}}," getretcode()",-1),N=t("p",null,[e("return type : int "),t("br"),e(" parameter : void")],-1),O={class:"custom-container tip"},T={class:"custom-container-title"},F=t("p",null,"에러가 미발생 시 getretcode()가 0으로 들어옵니다.",-1),M=t("p",null,[t("b",{style:{"font-size":"20px"}},[e("(3) String 처리 Function. "),t("br"),e(" Property Function의 char를 사용하면 좀 더 편리하게 사용할 수 있습니다. ")]),t("br"),t("b",{style:{"font-size":"20px"}},"➀ (indexstr) 문자열 위치 "),t("br")],-1),G=t("p",{style:{"background-color":"rgb(223, 230, 247)","margin-right":"10px","padding-left":"20px"}},"indexstr(COLUMN, 비교문자열, NotFound-Return-Value)",-1),B=n('<p>return type : String, String, int <br> parameter : int</p><p><b style="font-size:20px;">2) Property Function</b><br> Dataset 또는 Column에 연결되어 사용되는 Property Function에 대한 설명입니다.<br><b style="font-size:20px;">(1) Column에 연결되어 있는 Property Function.</b></p><p style="background-color:rgb(223, 230, 247);margin-right:10px;padding-left:20px;"> * COLUMN + “.” + function <br> * DATASET + “.” + COLUMN + “.” + function</p><p><b style="font-size:20px;">➀ (char) 부분 문자열처리 </b><br></p><p style="background-color:rgb(223, 230, 247);margin-right:10px;padding-left:20px;">구문 1 : char(startIndex, endIndex)</p>',5),U=t("p",null,[e("return type : String "),t("br"),e(" parameter : String")],-1),D=t("p",{style:{"background-color":"rgb(223, 230, 247)","margin-right":"10px","padding-left":"20px"}},"구문 2 : char(비교문자열)",-1),I=t("p",null,[e("return type : String "),t("br"),e(" parameter : String")],-1),E=t("p",{style:{"background-color":"rgb(223, 230, 247)","margin-right":"10px","padding-left":"20px"}},"구문 3 : char(검색된순서, 비교문자열)",-1),P=t("p",null,[e("return type : String "),t("br"),e(" parameter : int, String")],-1),w=t("p",{style:{"background-color":"rgb(223, 230, 247)","margin-right":"10px","padding-left":"20px"}},"구문 4 : char(start비교문자열, end비교문자열)",-1),A=t("p",null,[e("return type : String "),t("br"),e(" parameter : String, String")],-1),W=t("p",{style:{"background-color":"rgb(223, 230, 247)","margin-right":"10px","padding-left":"20px"}},"구문 5 : char(검색된순서, 비교문자열, 검색된순서, 비교문자열)",-1),j=t("p",null,[e("return type : String "),t("br"),e(" parameter : int, String, int, String")],-1),q=t("p",null,[t("b",{style:{"font-size":"20px"}},"➁ (charint) 부분 문자열처리 "),t("br")],-1),H=t("p",{style:{"background-color":"rgb(223, 230, 247)","margin-right":"10px","padding-left":"20px"}},"구문 1 : charint(startIndex)",-1),J=t("p",null,[e("return type : int "),t("br"),e(" parameter : int")],-1),K=t("p",{style:{"background-color":"rgb(223, 230, 247)","margin-right":"10px","padding-left":"20px"}},"구문 2 : charint(startIndex, endIndex)",-1),Q=t("p",null,[e("return type : int, int "),t("br"),e(" parameter : int")],-1),X=t("p",null,[t("b",{style:{"font-size":"20px"}},"➂ (getint) 정수 변환 "),t("br")],-1),Y=t("p",{style:{"background-color":"rgb(223, 230, 247)","margin-right":"10px","padding-left":"20px"}},"구문 : getint()",-1),Z=t("p",null,[e("return type : int "),t("br"),e(" parameter : void")],-1),$=t("p",null,[t("b",{style:{"font-size":"20px"}},"➃ (getlong) long 변환 "),t("br")],-1),tt=t("p",{style:{"background-color":"rgb(223, 230, 247)","margin-right":"10px","padding-left":"20px"}},"구문 : getlong()",-1),et=t("p",null,[e("return type : long "),t("br"),e(" parameter : void")],-1),nt=t("p",null,[t("b",{style:{"font-size":"20px"}},"➄ (getdouble) double 변환 "),t("br")],-1),rt=t("p",{style:{"background-color":"rgb(223, 230, 247)","margin-right":"10px","padding-left":"20px"}},"구문 : getdouble(roundOption, DecimalFormatString)",-1),ot=n('<p>return type : double <br> parameter : String, String <br> roundOption : “up” 또는 “dn” <br> up : 소수점 반올림 처리 합니다. <br> dn : 소수점 절삭처리 합니다. <br> DecimalFormatString : ‘#’ 를 이용하여 format을 지정합니다.</p><p style="color:rgb(0, 164, 255);"> Ex) Column.getdouble (“dn”, “###.##”) : Column 값이 123.456 이면 return 값은 123.45 Column.getdouble (“up”, “###.##”) : Column 값이 123.456 이면 return 값은 123.46 </p><p><b style="font-size:20px;">➅ (toString) string 변환 </b><br></p><p style="background-color:rgb(223, 230, 247);margin-right:10px;padding-left:20px;">구문 : COLUMN_ID.toString</p>',4),it=t("p",null,[e("return type : String "),t("br"),e(" parameter : void")],-1),pt=t("p",null,[t("b",{style:{"font-size":"20px"}},"➆ (getTrim) string 변환 "),t("br")],-1),lt=t("p",{style:{"background-color":"rgb(223, 230, 247)","margin-right":"10px","padding-left":"20px"}},"구문 : COLUMN_ID.getTrim",-1),st=t("p",null,[e("return type : String "),t("br"),e(" parameter : void")],-1),gt=t("p",null,[t("b",{style:{"font-size":"20px"}},"➇ (length) string 길이 "),t("br")],-1),dt=t("p",{style:{"background-color":"rgb(223, 230, 247)","margin-right":"10px","padding-left":"20px"}},"구문 : length()",-1),at=t("p",null,[e("return type : int "),t("br"),e(" parameter : void")],-1),ct=t("p",{style:{color:"rgb(0, 164, 255)"}}," Ex) Column의 값이 “akasaka” 일 때 Column. length() 의 결과 값은 7이 됩니다. ",-1),ut=t("p",null,[t("b",{style:{"font-size":"20px"}},"➈ (replace) 문자열 치환 "),t("br")],-1),bt=t("p",{style:{"background-color":"rgb(223, 230, 247)","margin-right":"10px","padding-left":"20px"}},"구문 : replace(OldString, NewString)",-1),_t=t("p",null,[e("return type : String "),t("br"),e(" parameter : String, String")],-1);function ht(mt,xt){const o=p("Badge");return l(),s("div",null,[a,e(" GLV로 Setting된 값을 String Type의 값으로 가져옵니다."),c,u,b,_,e(" GLV로 Setting된 값을 double Type의 값으로 가져옵니다. "),h,m,x,e(" GLV로 Setting된 값을 int Type의 값으로 가져옵니다. "),y,f,C,e(" GLV로 Setting된 값을 longg Type의 값으로 가져옵니다. "),S,k,V,z,e(" 업무 처리시 사용되는 BOC에서 생성된 결과 메시지를 가져오는 function입니다. "),v,R,L,e(" 최종 처리 결과 코드를 가져오는 function입니다. "),N,r(" Remark "),t("div",O,[t("p",T,[g(o,{type:"tip",text:"Remark",vertical:"middle"})]),F]),r(" "),M,G,e(" 입력되는 Column의 값에 비교문자열의 index를 검색합니다. 만일 해당 비교문자열이 존재하지 않으면 NotFound-Return-Value의 값을 Return 합니다. "),B,e(" 해당 Current Record Column의 값에서 해당 범위 안위 string값을 가져옵니다. "),U,D,e(" 해당 Current Record Column의 값에서 시작부터 해당 문자열의 시작 index 범위에 있는 String을 가져옵니다. "),I,E,e(" 해당 Current Record Column의 값에서 검색된 비교문자열의 순번 index 부터 해당 Column 값의 종료까지의 String을 가져옵니다. "),P,w,e(" 해당 Current Record Column의 값에서 검색된 start비교문자열과 end비교문자열 사이의 String을 가져옵니다. "),A,W,e(" 시작 문자열 발생순서부터 종료 문자열 발생순서 사이 값을 가져옵니다. "),j,q,H,e(" 해당 Current Record Column의 값에서 startindex의 string index부터 문자열 종료까지의 값을 int Type으로 가져옵니다. "),J,K,e(" 해당 Current Record Column의 값에서 startindex에서 endindex 범위에 있는 값을 을 int Type으로 가져옵니다. "),Q,X,Y,e(" 해당 Current Record Column의 값을 int Type으로 return합니다. "),Z,$,tt,e(" Current Record Column의 값을 long Type으로 return합니다. "),et,nt,rt,e(" Current Record Column의 값을 double Type으로 return합니다. "),ot,e(" Current Record Column의 값을 string Type으로 return합니다. "),it,pt,lt,e(" Current Record Column의 값을 string Type으로 return하면서 공백을 제거합니다. "),st,gt,dt,e(" Current Record Column 값의 Character 길이를 return합니다. "),at,ct,ut,bt,e(" 해당 Current Record Column의 String 문자열에서 OldString을 NewString으로 변환합니다. "),_t])}const ft=i(d,[["render",ht],["__file","inFunction.html.vue"]]);export{ft as default};
